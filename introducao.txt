AUTENTICAÇÃO NODE + mongoDB  + JWT   login e registro com Node.js

 
° Vamos criar uma API com o Express e MongoDb
° Onde teremos endpoints públicos e privados;
Os privados precisam do token para serem acessados;
o Token é entregue através do login bem sucedido;
° Precisamos enviar o token pelo header da requisição;
° Um middleware valida se o token é válido ou não;
° não ha persistencia de sessão no back-end, tudo é feito pelo token;

// O QUE É JWT

° Um acronimo para JSON WEB TOKEN
°Utilizando o JSON para a comunicação dos dados do token;
° É um recurso para autorização, e não autenticação;
° Após a autenticação o token é enviado pelo sistem;
 ° e então com base no token verificamos o que o usuário pode ou não acessar;
O token pe criptogtafado, precisamos decodificar na parte do back-end;


// FLUXO DO WJT

° O primeiro passo a autenticação, após a combinação entre email/nome
do usuario e senha for dada como correta temos o segundo passo.

° O token é enviado na resposta da requisição de login;
°Precisams salvar o token, geralmente fica na LocalStorage;
° O token precisa ser enviado em todas as requisiçoes, para que o  usuario consiga ter acesso aos recurso protegidos;
° uma vez que API não possui vinculo com o front-end, o JWT é responsável;

// POR QUE E ONDE UTILIZAR JWT?

° O JWT tem uma vantagem de transmitir os dados do usuário por meio de token
° fazendo com que  seja melhor do que Session para algumas situções:
°utilizações: Single Sing On,  Comunicação entre Microsserviços,

Aplicações com Load Balancers:
° Esta abordagem Também segue padrões do Restful, onde não podemos manter uma ligação entre a API E OUTROS APLICAÇÕES;

// pONTOS NEGATIVOS DO JWT

° Algumas críticas ao Jwt  se devem ao secret ser único para todas a aplicações;

° o que pode comprometer um ou mais usuarios se este for descoberto;
° E também o tamanho do token, que gasta recursos dos servidores sendo transmitido e decodificando entre as requisiçoes;
° Podem parecer irrelevantes, mas para grandes aplicações representa um custo;





